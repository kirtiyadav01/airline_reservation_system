
package javaapplication.airline;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
public class SearchFlight extends javax.swing.JFrame {

    /**
     * Creates new form SearchFlight
     */
    public SearchFlight() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        checkAvailability = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        passengers = new javax.swing.JSpinner();
        specialConcession = new javax.swing.JComboBox<>();
        flightClass = new javax.swing.JComboBox<>();
        year = new javax.swing.JComboBox<>();
        month = new javax.swing.JComboBox<>();
        day = new javax.swing.JComboBox<>();
        from = new javax.swing.JComboBox<>();
        to = new javax.swing.JComboBox<>();
        error = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLayeredPane1.setBackground(new java.awt.Color(0, 0, 102));
        jLayeredPane1.setForeground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Go Airlines...");

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\RAJEEV\\Documents\\NetBeansProjects\\airline\\logo.jpg")); // NOI18N
        jLabel2.setText("jLabel2");

        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 68, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        checkAvailability.setBackground(new java.awt.Color(0, 0, 102));
        checkAvailability.setFont(new java.awt.Font("Monotype Corsiva", 1, 24)); // NOI18N
        checkAvailability.setForeground(new java.awt.Color(255, 255, 255));
        checkAvailability.setText("Check Availability");
        checkAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAvailabilityActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("From : ");

        jLabel4.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("To : ");

        jLabel5.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Date : ");

        jLabel6.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Passengers : ");

        jLabel7.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Class : ");

        jLabel8.setFont(new java.awt.Font("Sitka Subheading", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Special Concession : ");

        passengers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passengers.setModel(new javax.swing.SpinnerNumberModel(0, null, 5, 1));

        specialConcession.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        specialConcession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Student", "Female", "Senior Citizen (60+)", "Differently Abled" }));
        specialConcession.setSelectedItem("none");

        flightClass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        flightClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Premium Economy", "Business", "First Class" }));

        year.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023", "2024", " " }));

        month.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        month.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        day.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        from.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        from.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indira Gandhi International Airport, New Delhi", "Chhatrapati Shivaji Maharaj International Airport, Mumbai", "Kempegowda International Airport, Bengaluru", "Chennai International Airport", "Rajiv Gandhi International Airport, Hyderabad", "Netaji Subhas Chandra Bose International Airport, Kolkata", "Cochin International Airport", "Sardar Vallabhbhai Patel International Airport, Ahmedabad", "Pune Airport", "Jaipur International Airport", "Goa International Airport", "Trivandrum International Airport", "Hyderabad Airport", "Kolkata Airport", "Coimbatore International Airport", "Rajkot Airport", "Mangalore International Airport", " ", " " }));
        from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromActionPerformed(evt);
            }
        });

        to.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        to.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indira Gandhi International Airport, New Delhi", "Chhatrapati Shivaji Maharaj International Airport, Mumbai", "Kempegowda International Airport, Bengaluru", "Chennai International Airport", "Rajiv Gandhi International Airport, Hyderabad", "Netaji Subhas Chandra Bose International Airport, Kolkata", "Cochin International Airport", "Sardar Vallabhbhai Patel International Airport, Ahmedabad", "Pune Airport", "Jaipur International Airport", "Goa International Airport", "Trivandrum International Airport", "Hyderabad Airport", "Kolkata Airport", "Coimbatore International Airport", "Rajkot Airport", "Mangalore International Airport", " " }));
        to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toActionPerformed(evt);
            }
        });

        error.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        error.setForeground(new java.awt.Color(204, 0, 0));

        jLabel9.setText("MONTH");

        jLabel10.setText("DAY");

        jLabel11.setText("YEAR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(from, 0, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(to, 0, 1, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel11))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(flightClass, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialConcession, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flightClass, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialConcession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addComponent(error)
                .addGap(43, 43, 43)
                .addComponent(checkAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromActionPerformed
        if (to.getSelectedItem()== from.getSelectedItem()){
            error.setText("Source and Destination can not be same!");
            checkAvailability.setEnabled(false);
        }
        if (to.getSelectedItem()!= from.getSelectedItem()){
            error.setText("");
            checkAvailability.setEnabled(true);
        }
        
    }//GEN-LAST:event_fromActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed
      if (to.getSelectedItem()== from.getSelectedItem()){
            error.setText("Source and Destination can not be same!");
             checkAvailability.setEnabled(false);
        }
       if (to.getSelectedItem()!= from.getSelectedItem()){
            error.setText("");
            checkAvailability.setEnabled(true);
        }
        
    }//GEN-LAST:event_toActionPerformed

    private void checkAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAvailabilityActionPerformed
      
       
       String selectedDay = (String) day.getSelectedItem();
    String selectedMonth = (String) month.getSelectedItem(); // Ensure this is a proper month abbreviation
    String selectedYear = (String) year.getSelectedItem();

   
        String dateStr = selectedDay + "/" + selectedMonth + "/" + selectedYear;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy", Locale.UK);
        LocalDate date = LocalDate.parse(dateStr, formatter);

        LocalDate currentDate = LocalDate.now();

        if (date.isBefore(currentDate)) {
            error.setText("Date is earlier than the current date!");
        } else if (date.isAfter(currentDate.plusMonths(3))) {
            error.setText("Advance booking is available up to 3 months!");
        } else {
            try{
                // Valid date, no error
                String source1 = (String)from.getSelectedItem();
                String destination1 = (String)to.getSelectedItem();
                 int passenger = (int)passengers.getValue();
                String class1 = (String) flightClass.getSelectedItem();
                //create connection
                Class.forName("com.mysql.cj.jdbc.Driver");  
                Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/airline?characterEncoding=UTF-8","root","");
     
                if (con != null) {
                    System.out.println("Connection to the database has been established.");
                
                     // You can now perform database operations here.
                    // create.Statement() creates statement object which is responsible for executing queries on table 
                    Statement stmt = con.createStatement(); 
                    if (class1 == "Economy"){
                         String select = "Select flight_id, flight_name, boarding_time , arrival_time,available_seats_economy from flight_details where source = '"+source1+"' and destination = '"+ destination1 +"';";
                        ResultSet resultSet = stmt.executeQuery(select);
                        while(resultSet.next()){
                               
                               int flightId = resultSet.getInt("flight_id");
                               String flightName = resultSet.getString("flight_name");
                               java.sql.Time boardingTime = resultSet.getTime("boarding_time");
                               java.sql.Time arrivalTime = resultSet.getTime("arrival_time");
                               int available = resultSet.getInt("available_seats_economy");
                              //  availableTable store = new availableTable();
                               // store.fillTable(flightId, flightName, boardingTime, arrivalTime, available);
                                AvailableFlights a1 = new AvailableFlights();
                                a1.setVisible(true);
                                a1.tableReturner(flightId, flightName, boardingTime, arrivalTime, available);
                                a1.takedateAndClass(dateStr,class1);
                                
                         }
                    }
                    else if (class1 == "Business"){
                         String select = "Select flight_id, flight_name, boarding_time , arrival_time,available_business from flight_details where source = '"+source1+"' and destination = '"+ destination1 +"';";
                        ResultSet resultSet = stmt.executeQuery(select);
                        while(resultSet.next()){
                               
                               int flightId = resultSet.getInt("flight_id");
                               String flightName = resultSet.getString("flight_name");
                               java.sql.Time boardingTime = resultSet.getTime("boarding_time");
                               java.sql.Time arrivalTime = resultSet.getTime("arrival_time");
                               int available = resultSet.getInt("available_business");
                              //  availableTable store = new availableTable();
                               // store.fillTable(flightId, flightName, boardingTime, arrivalTime, available);
                                AvailableFlights a1 = new AvailableFlights();
                                a1.setVisible(true);
                                a1.tableReturner(flightId, flightName, boardingTime, arrivalTime, available);
                                 a1.takedateAndClass(dateStr, class1);
                         }
                    }
                     else if (class1 == "Premium Economy"){
                         String select = "Select flight_id, flight_name, boarding_time , arrival_time,premium_economy from flight_details where source = '"+source1+"' and destination = '"+ destination1 +"';";
                        ResultSet resultSet = stmt.executeQuery(select);
                        while(resultSet.next()){
                               
                               int flightId = resultSet.getInt("flight_id");
                               String flightName = resultSet.getString("flight_name");
                               java.sql.Time boardingTime = resultSet.getTime("boarding_time");
                               java.sql.Time arrivalTime = resultSet.getTime("arrival_time");
                               int available = resultSet.getInt("premium_economy");
                              //  availableTable store = new availableTable();
                               // store.fillTable(flightId, flightName, boardingTime, arrivalTime, available);
                                AvailableFlights a1 = new AvailableFlights();
                                a1.setVisible(true);
                                a1.tableReturner(flightId, flightName, boardingTime, arrivalTime, available);
                                 a1.takedateAndClass(dateStr, class1);
                         }
                    }
                     else if (class1 == "First Class"){
                         String select = "Select flight_id, flight_name, boarding_time , arrival_time,available_first_class from flight_details where source = '"+source1+"' and destination = '"+ destination1 +"';";
                        ResultSet resultSet = stmt.executeQuery(select);
                        while(resultSet.next()){
                               
                               int flightId = resultSet.getInt("flight_id");
                               String flightName = resultSet.getString("flight_name");
                               java.sql.Time boardingTime = resultSet.getTime("boarding_time");
                               java.sql.Time arrivalTime = resultSet.getTime("arrival_time");
                               int available = resultSet.getInt("available_first_class");
                              //  availableTable store = new availableTable();
                               // store.fillTable(flightId, flightName, boardingTime, arrivalTime, available);
                                AvailableFlights a1 = new AvailableFlights();
                                a1.setVisible(true);
                                a1.tableReturner(flightId, flightName, boardingTime, arrivalTime, available);
                                 a1.takedateAndClass(dateStr, class1);
                         }
                    }
            
                         // executeUpdate() is used for INSERT, UPDATE,DELETE statements.It returns number of rows affected by the execution of the statement 
            
                            /* if ((resultSet> 0)) {
                              System.out.println("successfully inserted");
                             }//close the connection
                                con.close();
                            }else{
                                 System.out.println( "unsucessful insertion "); 
                                // close the connection when you're done.
                                 con.close();}*/
                } else {
                System.out.println("Failed to establish a connection to the database.");
                }
            }catch(Exception e){
                System.out.println(e);
            }
   
    
        }
        
    }//GEN-LAST:event_checkAvailabilityActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchFlight().setVisible(true);
              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkAvailability;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JLabel error;
    private javax.swing.JComboBox<String> flightClass;
    private javax.swing.JComboBox<String> from;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> month;
    private javax.swing.JSpinner passengers;
    private javax.swing.JComboBox<String> specialConcession;
    private javax.swing.JComboBox<String> to;
    private javax.swing.JComboBox<String> year;
    // End of variables declaration//GEN-END:variables
}
